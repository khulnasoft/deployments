AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This AWS CloudFormation template installs the Khulnasoft Command Center components
  in ECS FARGATE.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: ECS Infrastructure Configuration
        Parameters:
          - VpcId
          - VpcCidr
          - EcsInstanceSubnets
          - LbSubnets
          - SSLCert
          - LBScheme
      - Label:
          default: Khulnasoft Security Configuration
        Parameters:
          - KhulnasoftConsoleAccess
          - KhulnasoftServerImage
          - KhulnasoftGatewayImage
          - ActiveActive
      - Label:
          default: 'RDS Configuration: RDS Configuration'
        Parameters:
          - RdsInstanceName
          - RdsInstanceClass
          - RdsStorage
          - MultiAzDatabase
    ParameterLabels:
      VpcId:
        default: VPC ID
      VpcCidr:
        default: VPC CIDR
      EcsInstanceSubnets:
        default: ECS Instance Subnets
      LbSubnets:
        default: Khulnasoft LB Subnets
      LBScheme:
        default: Khulnasoft LB Scheme
      KhulnasoftConsoleAccess:
        default: Web Console Source
      RdsInstanceName:
        default: RDS instance name
      RdsInstanceClass:
        default: RDS instance type
      RdsStorage:
        default: RDS storage size (GB)
      MultiAzDatabase:
        default: Enable Multi-AZ RDS
      ClusterName:
        default: Name of ecs cluster
      SSLCert:
        default: SSL cert ARN
Parameters:
  KhulnasoftServerImage:
    Type: String
    Description: Enter server image path on ECR
  KhulnasoftGatewayImage:
    Type: String
    Description: Enter gateway image path on ECR
  VpcId:
    Description: VpcId to deploy into
    Type: 'AWS::EC2::VPC::Id'
  VpcCidr:
    Description: 'For use by load balancer service polling. Enter VPC CIDR. Ex: 10.0.0.0/16'
    Type: String
  EcsInstanceSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select all the subnets ECS utilizes
    ConstraintDescription: >-
      Password must be at least 9 characters long and have 3 out of the
      following: one number, one lower case, one upper case, or one special
      character.
  LbSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select external subnets if you need internet access.
  LBScheme:
    Type: String
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
  KhulnasoftConsoleAccess:
    Description: The Default(0.0.0.0/0) CIDR range will provide global access for Khulnasoft Console. Please update your own IP address or CIDR range to restric the Khulnasoft Console access.
    Default: 0.0.0.0/0
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  RdsInstanceClass:
    Description: ''
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
      - db.m5.10xlarge
      - db.m5.16xlarge
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.8xlarge
      - db.r5.16xlarge
    ConstraintDescription: Must be a valid EC2 RDS instance type
  AuditRDS:
    Description: Select Yes to create a separate RDS instance for Audit
    Default: 'No'
    Type: String
    AllowedValues: ['Yes', 'No']

  AuditRdsInstanceClass:
    Description: ''
    Type: String
    Default: db.t3.medium
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
      - db.m5.10xlarge
      - db.m5.16xlarge
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.8xlarge
      - db.r5.16xlarge
    ConstraintDescription: Must be a valid EC2 RDS instance type
  RdsStorage:
    Default: '50'
    Description: 'Disk space for RDS Database'
    Type: Number
    MinValue: '50'
    MaxValue: '65536'
    ConstraintDescription: Must be set to between 40 and 1024GB.
  MultiAzDatabase:
    Default: 'true'
    Description: Multi-AZ RDS Deployment for High Availability. Prefer true for Enterprise Deployment
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: Must be either true or false.
  ClusterName:
    Description: Name of ecs cluster to be created
    Type: String
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '[a-zA-Z0-9-]*'
  SSLCert:
    Description: ARN of the SSL cert to be used with console web UI LB
    Type: String
  ActiveActive: 
    Description: Active Active configuration for khulnasoft console 
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
Conditions:
  CreateActiveActive: !Equals [ !Ref ActiveActive, 'true' ]
  NotCreateActiveActive: !Equals [ !Ref ActiveActive, 'false' ]
  CreateAuditrds: !Equals [!Ref AuditRDS, 'Yes']
  ReplaceAuditrds: !Equals [!Ref AuditRDS, 'No']
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"
  RandomStringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 10
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: python3.9
      Code:
        ZipFile: |
          import cfnresponse
          from random import choice
          from string import ascii_lowercase, digits
          def random_string(length=8, chars=ascii_lowercase + digits):
            return "".join(choice(chars) for x in range(length))
          def lambda_handler(event, context):
            print(f"Data in event: {event}")
            response_data = {}
            if event["RequestType"] == "Create":
              string_length = int(event["ResourceProperties"]["Length"])
              physicalResourceId = random_string(string_length)
              response_data = { "RandomString": physicalResourceId }
            
            else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
              physicalResourceId = event["PhysicalResourceId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
  RandomString:
   Type: AWS::CloudFormation::CustomResource
   Properties:
     Length: 5
     ServiceToken: !GetAtt RandomStringLambdaFunction.Arn
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Ref ClusterName, !GetAtt RandomString.RandomString]]
  # Khulnasoft Console
  KhulnasoftConsoleLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - KhulnasoftConsoleSecurityGroup
    Properties:
      Name: !Join ["-", ["KhulnasoftConsoleLB", !GetAtt RandomString.RandomString]]
      Scheme: !Ref LBScheme
      SecurityGroups:
        - !Ref KhulnasoftConsoleSecurityGroup
      Subnets: !Ref LbSubnets
      Type: application
  KhulnasoftConsoleTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - KhulnasoftEcsTaskRole
      - RdsInstance
      - KhulnasoftConsoleLogs
      - SecretP
      - SecretU
    Properties:
      Family: !Join ["-", ["khulnasoft-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref KhulnasoftEcsTaskRole
      ContainerDefinitions:
        - Name: !Join ["-", ["khulnasoft-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          Image: !Ref KhulnasoftServerImage
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          PortMappings:
            - ContainerPort: '8080'
              HostPort: '8080'
              Protocol: tcp
            - ContainerPort: '8443'
              HostPort: '8443'
              Protocol: tcp
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['-', ['/khulnasoft/console', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: khulnasoftConsole
          Secrets:
            - Name: SCALOCK_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: SCALOCK_AUDIT_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: SCALOCK_DBUSER
              ValueFrom: !Ref SecretU
            - Name: SCALOCK_AUDIT_DBUSER
              ValueFrom: !Ref SecretU
            - Name: KHULNASOFT_PUBSUB_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: KHULNASOFT_PUBSUB_DBUSER
              ValueFrom: !Ref SecretU
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: DEBUG
            - Name: KHULNASOFT_GRPC_MODE
              Value: 1
            - Name: KHULNASOFT_DOCKERLESS_SCANNING
              Value: 1
            - Name: SCALOCK_DBSSL
              Value: require
            - Name: SCALOCK_AUDIT_DBSSL
              Value: require
            - Name: SCALOCK_DBNAME
              Value: scalock
            - Name: BATCH_INSTALL_GATEWAY
              Value: !GetAtt
                - KhulnasoftNlb
                - DNSName
            - Name: SCALOCK_DBHOST
              Value: !GetAtt
                - RdsInstance
                - Endpoint.Address
            - Name: SCALOCK_AUDIT_DBNAME
              Value: slk_audit
            - Name: SCALOCK_AUDIT_DBHOST
              Value: !If [CreateAuditrds, !GetAtt AuditRdsInstance.Endpoint.Address, !GetAtt RdsInstance.Endpoint.Address]
            - Name: KHULNASOFT_PUBSUB_DBSSL
              Value: !If [CreateActiveActive, require, !Ref "AWS::NoValue"]
            - Name: KHULNASOFT_PUBSUB_DBNAME
              Value: !If [CreateActiveActive, pubsub, !Ref "AWS::NoValue"]
            - Name: KHULNASOFT_PUBSUB_DBHOST
              Value: !If [CreateActiveActive, !GetAtt RdsInstance.Endpoint.Address, !Ref "AWS::NoValue"]
            - Name: KHULNASOFT_CLUSTER_MODE
              Value: !If [CreateActiveActive, active-active, !Ref "AWS::NoValue"]
      TaskRoleArn: !Ref KhulnasoftEcsTaskRole
  KhulnasoftConsoleService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - KhulnasoftConsoleTaskDefinition
      - KhulnasoftConsoleListener
      - KhulnasoftConsoleGrpcListener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref KhulnasoftFargateSecurityGroup
          Subnets: !Ref EcsInstanceSubnets
      ServiceName: !Join ["-", ["khulnasoft-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      DesiredCount: '1'
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      LoadBalancers:
        - ContainerName: !Join ["-", ["khulnasoft-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8080'
          TargetGroupArn: !Ref KhulnasoftConsoleTargetGroup
        - ContainerName: !Join ["-", ["khulnasoft-console", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8443'
          TargetGroupArn: !Ref KhulnasoftConsoleGrpcTargetGroup
      TaskDefinition: !Ref KhulnasoftConsoleTaskDefinition
  KhulnasoftConsoleListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - KhulnasoftConsoleTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KhulnasoftConsoleTargetGroup
      LoadBalancerArn: !Ref KhulnasoftConsoleLB
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCert
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2019-08
  KhulnasoftConsoleTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - KhulnasoftConsoleLB
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 6
      Matcher:
        HttpCode: '200'
      Name: !Join ["-", ["khulnasoft-console", !Join ["-", ["tg", !GetAtt RandomString.RandomString]]]]
      Port: '8080'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: 'lb_cookie'
      UnhealthyThresholdCount: 6
      VpcId: !Ref VpcId
  KhulnasoftConsoleGrpcListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - KhulnasoftConsoleGrpcTargetGroup
      - KhulnasoftNlb
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KhulnasoftConsoleGrpcTargetGroup
      LoadBalancerArn: !Ref KhulnasoftNlb
      Port: '8443'
      Protocol: TCP
  KhulnasoftConsoleGrpcTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - KhulnasoftConsoleLB
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      HealthCheckPort: 8443
      Name: !Join ["-", ["khulnasoft-console-grpc", !GetAtt RandomString.RandomString]]
      Port: '8443'
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
  KhulnasoftGatewayListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - KhulnasoftGatewayTargetGroup
      - KhulnasoftNlb
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KhulnasoftGatewayTargetGroup
      LoadBalancerArn: !Ref KhulnasoftNlb
      Port: '3622'
      Protocol: TCP
  KhulnasoftGatewayGRPCListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - KhulnasoftGatewayGRPCTargetGroup
      - KhulnasoftNlb
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref KhulnasoftGatewayGRPCTargetGroup
      LoadBalancerArn: !Ref KhulnasoftNlb
      Port: '8444'
      Protocol: TCP
  KhulnasoftGatewayTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - KhulnasoftNlb
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPort: 8099
      Name: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["ssh-tg", !GetAtt RandomString.RandomString]]]]
      Port: '3622'
      Protocol: TCP
      VpcId: !Ref VpcId
  KhulnasoftGatewayGRPCTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - KhulnasoftNlb
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 6
      UnhealthyThresholdCount: 6
      HealthCheckPort: 8099
      Name: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["grpc-tg", !GetAtt RandomString.RandomString]]]]
      Port: '8443'
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      VpcId: !Ref VpcId
  KhulnasoftGatewayTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - KhulnasoftEcsTaskRole
      - RdsInstance
      - KhulnasoftGatewayLogs
      - SecretP
    Properties:
      Family: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref KhulnasoftEcsTaskRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      TaskRoleArn: !Ref KhulnasoftEcsTaskRole
      ContainerDefinitions:
        - Name: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          Image: !Ref KhulnasoftGatewayImage
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          PortMappings:
            - ContainerPort: '3622'
              HostPort: '3622'
              Protocol: tcp
            - ContainerPort: '8099'
              HostPort: '8099'
              Protocol: tcp
            - ContainerPort: '8443'
              HostPort: '8443'
              Protocol: tcp
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['-', ['/khulnasoft/gateway', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: khulnasoftGateway
          Secrets:
            - Name: SCALOCK_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: SCALOCK_AUDIT_DBPASSWORD
              ValueFrom: !Ref SecretP
            - Name: SCALOCK_DBUSER
              ValueFrom: !Ref SecretU
            - Name: SCALOCK_AUDIT_DBUSER
              ValueFrom: !Ref SecretU
          Environment:
            - Name: SCALOCK_LOG_LEVEL
              Value: DEBUG
            - Name: SCALOCK_DBSSL
              Value: require
            - Name: SCALOCK_AUDIT_DBSSL
              Value: require
            - Name: HEALTH_MONITOR
              Value: '0.0.0.0:8099'
            - Name: SCALOCK_DBNAME
              Value: scalock
            - Name: SCALOCK_DBHOST
              Value: !GetAtt RdsInstance.Endpoint.Address
            - Name: SCALOCK_AUDIT_DBNAME
              Value: slk_audit
            - Name: SCALOCK_AUDIT_DBHOST
              Value: !If [CreateAuditrds, !GetAtt AuditRdsInstance.Endpoint.Address, !GetAtt RdsInstance.Endpoint.Address]
            - Name: KHULNASOFT_CONSOLE_SECURE_ADDRESS
              Value: !Join ["", [!GetAtt KhulnasoftNlb.DNSName, ':8443']]
  KhulnasoftGatewayService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - KhulnasoftGatewayTaskDefinition
      - KhulnasoftNlb
      - KhulnasoftGatewayTargetGroup
      - KhulnasoftGatewayGRPCTargetGroup
      - KhulnasoftGatewayListener
      - KhulnasoftGatewayGRPCListener
    Properties:
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref KhulnasoftFargateSecurityGroup
          Subnets: !Ref EcsInstanceSubnets
      Cluster: !Ref ECSCluster
      ServiceName: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      DesiredCount: '1'
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      LoadBalancers:
        - ContainerName: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '3622'
          TargetGroupArn: !Ref KhulnasoftGatewayTargetGroup
        - ContainerName: !Join ["-", ["khulnasoft-gateway", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          ContainerPort: '8443'
          TargetGroupArn: !Ref KhulnasoftGatewayGRPCTargetGroup
      TaskDefinition: !Ref KhulnasoftGatewayTaskDefinition

  KhulnasoftConsoleSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to Khulnasoft Console Instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Ref KhulnasoftConsoleAccess
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref KhulnasoftConsoleAccess
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: !Ref KhulnasoftConsoleAccess
  KhulnasoftFargateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - KhulnasoftConsoleSecurityGroup
    Properties:
      GroupDescription: Allow lb access to fargate tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3622
          ToPort: 3622
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8099
          ToPort: 8099
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref KhulnasoftConsoleSecurityGroup
  KhulnasoftEcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", ["KhulnasoftEcsTaskRole", !GetAtt RandomString.RandomString]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["KhulnasoftScannerPolicy", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetRepositoryPolicy'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogDelivery'
                  - 'logs:CreateLogStream'
                  - 'logs:TagLogGroup'
                Resource: '*'
              - !Ref 'AWS::NoValue'
        - PolicyName:  !Join ["-", ["KhulnaSoftretsManagerPolicy", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - !Ref SecretP
                  - !Ref SecretU
        - PolicyName: !Join ["-", ["KMSPermisions", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                Resource: '*'
  KhulnasoftConsoleLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/khulnasoft/console', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30
  KhulnasoftGatewayLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/khulnasoft/gateway', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30
  KhulnasoftEnforcerLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/khulnasoft/enforcer', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30
  KhulnasoftNlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join
        - '-'
        - - !Ref ECSCluster
          - khulnasoftNlb
      Scheme: !Ref LBScheme
      Subnets: !Ref LbSubnets
      Type: network
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
  LBLogsStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: 'true'
        BlockPublicPolicy: 'true'
        IgnorePublicAcls: 'true'
        RestrictPublicBuckets: 'true'
      AccessControl: Private
      #BucketName: !Sub '${AWS::StackName}-lb-accesslogs'
      BucketName: !GetAtt S3BucketName.OutputString
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: BucketType
          Value: Log
    DeletionPolicy: Delete

  # Custom resource to transform input to lowercase.                                             
  LowerCaseLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Returns the lowercase version of a string
      MemorySize: 256
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LowerCaseLambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import cfnresponse

          def lambda_handler(event, context):                                                    
              output = event['ResourceProperties'].get('InputString', '').lower()                
              responseData = {'OutputString': output}                                            
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                
  LowerCaseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "lambda-write-logs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*"
  S3BucketName:
    Type: Custom::Lowercase
    Properties:
      ServiceToken: !GetAtt LowerCaseLambda.Arn
      InputString: !Sub '${ECSCluster}-lb-accesslogs'    
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'LBLogsStoreBucket'
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ELBAccessLogselbacc
            Effect: Allow
            Resource: !Join ['', [!GetAtt LBLogsStoreBucket.Arn, /*]]
            Principal:
              AWS: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
            Action: ['s3:PutObject']
          - Sid: ELBAccessLogsServiceACL
            Effect: Allow
            Resource: !GetAtt LBLogsStoreBucket.Arn
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: ['s3:GetBucketAcl']
          - Sid: ELBAccessLogsServicePut
            Effect: Allow
            Resource: !Join ['', [!GetAtt LBLogsStoreBucket.Arn, /*]]
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: ['s3:PutObject']
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
  RdsInstance:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - RdsSecurityGroup
      - RdsInstanceSubnetGroup
    Properties:
      PubliclyAccessible: false
      AllocatedStorage: !Ref RdsStorage
      AutoMinorVersionUpgrade: 'false'
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      BackupRetentionPeriod: '7'
      DBInstanceIdentifier: !Join ['-', ['khulnasoft-db', !Join ["-", ["rds", !GetAtt RandomString.RandomString]]]]
      DBInstanceClass: !Ref RdsInstanceClass
      DBSubnetGroupName: !Ref RdsInstanceSubnetGroup
      DeleteAutomatedBackups: False
      DeletionProtection: False
      Engine: postgres
      EngineVersion: 12.15
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref SecretU, ':SecretString}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref SecretP, ':SecretString}}' ]]
      MultiAZ: !Ref MultiAzDatabase
      StorageType: gp2
      StorageEncrypted: True
      #KmsKeyId: !GetAtt KMSKeyForDB.Arn
  AuditRdsInstance:
    Condition: CreateAuditrds
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - RdsSecurityGroup
      - RdsInstanceSubnetGroup
    Properties:
      PubliclyAccessible: false
      AllocatedStorage: !Ref RdsStorage
      AutoMinorVersionUpgrade: 'false'
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      BackupRetentionPeriod: '7'
      DBInstanceIdentifier: !Join ['-', ['khulnasoft-audit-db', !Join ["-", ["rds", !GetAtt RandomString.RandomString]]]]
      DBInstanceClass: !Ref AuditRdsInstanceClass
      DBSubnetGroupName: !Ref RdsInstanceSubnetGroup
      DeleteAutomatedBackups: False
      DeletionProtection: False
      Engine: postgres
      EngineVersion: 12.15
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref SecretU, ':SecretString}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref SecretP, ':SecretString}}' ]]
      MultiAZ: !Ref MultiAzDatabase
      StorageType: gp2
      StorageEncrypted: True
      #KmsKeyId: !GetAtt KMSKeyForDB.Arn
  RdsInstanceSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Source subnet
      SubnetIds: !Ref EcsInstanceSubnets
  RdsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to RDS Instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref KhulnasoftFargateSecurityGroup
  #Secrets
  SecretP:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Khulnasoft RDS password
      Name: !Join ["/", ["KhulnasoftRdsPassword", !GetAtt RandomString.RandomString]]
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
  SecretU:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Khulnasoft RDS Username
      Name: !Join ["/", ["KhulnasoftRdsUsername", !GetAtt RandomString.RandomString]]
      SecretString: 'khulnasoftadmin'
Outputs:
  KhulnasoftConsole:
    Description: URL to access Khulnasoft Security Console
    Value: !Join ["", ['https://', !GetAtt KhulnasoftConsoleLB.DNSName]]
  KhulnasoftConsoleGrpcConnection:
    Description: >-
      DNS to server gRPC
    Value: !Join ["", ['https://', !GetAtt KhulnasoftConsoleLB.DNSName, ":8443"]]
  KhulnasoftGatewayExternalConnection:
    Description: >-
      Khulnasoft Enforcer gateway startup connection string for use when Enforcers are
      external to VPC.
    Value: !Join [":", [!GetAtt KhulnasoftNlb.DNSName, "3622"]]
  KhulnasoftEcsTaskRole:
    Description: IAM role assigned to access ECR
    Value: !Ref KhulnasoftEcsTaskRole
  KhulnasoftDBInstanceIdentifier:
    Description : Khulnasoft DB Instance Identifier
    Value : !Ref RdsInstance
    Export :
      Name : 
        'Fn::Sub': '${AWS::StackName}-Khulnasoft60DBInstanceID'
  KhulnasoftAuditDBInstanceIdentifier:
    Condition: CreateAuditrds
    Description : Khulnasoft audit DB Instance Identifier
    Value : !Ref AuditRdsInstance
    Export :
      Name : 
        'Fn::Sub': '${AWS::StackName}-Khulnasoft60AuditDBInstanceID'
