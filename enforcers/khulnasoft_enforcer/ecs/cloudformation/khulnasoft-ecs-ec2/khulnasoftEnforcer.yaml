AWSTemplateFormatVersion: 2010-09-09
Description: >-
    This Cloudformation Template Installs Khulnasoft Enforcer on ECS Cluster with EC2 compatibilities.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Khulnasoft Component Configurations
        Parameters:
          - KhulnasoftGatewayAddress
          - KhulnasoftToken
          - Taskprivileged
          - KhulnasoftEnforcerImage
          - ECSClusterName
          #- SSLCert
    ParameterLabels:
        KhulnasoftGatewayAddress:
            default: Existing Khulnasoft Gateway DNS/IP
        KhulnasoftToken:
            default: Khulnasoft Token
        Taskprivileged:
            default: Task Privileged    
        KhulnasoftEnforcerImage:
            default: Khulnasoft Enforcer Image
        ECSClusterName:
            default: ECS Cluster Name 
Parameters:
    KhulnasoftGatewayAddress:
        Type: String
        Description: The Khulnasoft gateway DNS/IP.
    KhulnasoftToken:
        Description: Khulnasoft Enforcer installation token retrieved from Khulnasoft Management Console.
        Type: String
    Taskprivileged:
        Description: Select false to run enforcer in non-privileged mode. defualt is privileged mode. 
        Type: String 
        Default: 'true'
        AllowedValues:  
          - 'true'
          - 'false'
    KhulnasoftEnforcerImage:
        Type: String
        Description: Enter Enforcer image URI from ECR
    ECSClusterName:
        Type: String
        Description: Enter the existing ECS Cluster name.
Resources:
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - sts:AssumeRole
          Policies:
            - PolicyName: allowLambdaLogging
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "logs:*"
                    Resource: "*"              
                        
    RandomStringLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
          Handler: index.lambda_handler
          Timeout: 10
          Role: !GetAtt "LambdaExecutionRole.Arn"
          Runtime: python3.9
          Code:
            ZipFile: |
              import cfnresponse
              from random import choice
              from string import ascii_lowercase, digits
              def random_string(length=8, chars=ascii_lowercase + digits):
                return "".join(choice(chars) for x in range(length))
              def lambda_handler(event, context):
                print(f"Data in event: {event}")
                response_data = {}
                if event["RequestType"] == "Create":
                  string_length = int(event["ResourceProperties"]["Length"])
                  physicalResourceId = random_string(string_length)
                  response_data = { "RandomString": physicalResourceId }
                
                else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
                  physicalResourceId = event["PhysicalResourceId"]
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
    RandomString:
        Type: AWS::CloudFormation::CustomResource
        Properties:
          Length: 5
          ServiceToken: !GetAtt RandomStringLambdaFunction.Arn
    KhulnasoftEnforcerTaskDefinition:
        Type: 'AWS::ECS::TaskDefinition'
        Properties:
          PidMode: 'host'
          ContainerDefinitions:
            - Memory: '1024'
              Essential: 'true'
              MountPoints:
                - ContainerPath: /var/run
                  SourceVolume: var-run
                - ContainerPath: /dev
                  SourceVolume: dev
                - ContainerPath: /host/opt/khulnasoft
                  SourceVolume: khulnasoft
                  ReadOnly: true
                - ContainerPath: /opt/khulnasoft/tmp
                  SourceVolume: khulnasoft-tmp
                - ContainerPath: /opt/khulnasoft/audit
                  SourceVolume: khulnasoft-audit
                - ContainerPath: /data
                  SourceVolume: data
                - ContainerPath: /host/proc
                  SourceVolume: proc
                  ReadOnly: true
                - ContainerPath: /host/sys
                  SourceVolume: sys
                  ReadOnly: true
                - ContainerPath: /host/etc
                  SourceVolume: etc
                  ReadOnly: true
              Name: khulnasoft-enforcer
              Privileged: !Ref Taskprivileged
              LinuxParameters:
                Capabilities:
                  Add:
                    - SYS_ADMIN
                    - NET_ADMIN
                    - NET_RAW
                    - SYS_PTRACE
                    - KILL
                    - MKNOD
                    - SETGID
                    - SETUID
                    - SYS_MODULE
                    - AUDIT_CONTROL
                    - SYSLOG
                    - SYS_CHROOT
                    - LINUX_IMMUTABLE
              LogConfiguration:
                LogDriver: awslogs
                Options:
                  awslogs-group: !Join ['-', ['/khulnasoft/enforcer', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
                  awslogs-region: !Ref "AWS::Region"
                  awslogs-stream-prefix: khulnasoftEnforcer
              Environment:
                - Name: KHULNASOFT_SERVER
                  Value: !Ref KhulnasoftGatewayAddress
                - Name: KHULNASOFT_TOKEN
                  Value: !Ref KhulnasoftToken
                - Name: SILENT
                  Value: 'yes'
                - Name: RESTART_CONTAINERS
                  Value: 'no'
                - Name: KHULNASOFT_LOGICAL_NAME
                  Value: !Join 
                    - '-'
                    - - ECS
                      - !Join ["-", ["khulnasoft-enf-td", !GetAtt RandomString.RandomString]]
              Image: !Ref KhulnasoftEnforcerImage
              Cpu: '512'
          Volumes:
            - Host:
                SourcePath: /var/run
              Name: var-run
            - Host:
                SourcePath: /dev
              Name: dev
            - Host:
                SourcePath: /opt/khulnasoft
              Name: khulnasoft
            - Host:
                SourcePath: /opt/khulnasoft/tmp
              Name: khulnasoft-tmp
            - Host:
                SourcePath: /opt/khulnasoft/audit
              Name: khulnasoft-audit
            - Host:
                SourcePath: /opt/khulnasoft/data
              Name: data
            - Host:
                SourcePath: /proc
              Name: proc
            - Host:
                SourcePath: /sys
              Name: sys
            - Host:
                SourcePath: /etc
              Name: etc
          Family: !Join 
            - '-'
            - - khulnasoft-enforcer
              - !Join ["-", ["td", !GetAtt RandomString.RandomString]]
    KhulnasoftEnforcerDaemon:
        DependsOn:
          - KhulnasoftEnforcerTaskDefinition
        Type: 'AWS::ECS::Service'
        Properties:
          Cluster: !Ref ECSClusterName
          # If the default capacity provider strategy is configured as AGS in AWS ECS, use launch type as EC2 in deployment method.          
          # LaunchType: EC2
          SchedulingStrategy: DAEMON
          ServiceName: !Join 
            - '-'
            - - khulnasoft-enforcer
              - !Join ["-", ["td", !GetAtt RandomString.RandomString]]
          TaskDefinition: !Ref KhulnasoftEnforcerTaskDefinition
    KhulnasoftEnforcerLogs:
        Type: 'AWS::Logs::LogGroup'
        Properties:
          LogGroupName: !Join ['-', ['/khulnasoft/enforcer', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          RetentionInDays: 30      
